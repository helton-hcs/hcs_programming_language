program = top_statements

primary_expression = simple_expression / function_expression

function_definition = named_function

function_expression = anonymous_function / named_function 

anonymous_function = "function" formal_parameters_and_body

named_function = "function" identifier formal_parameters_and_body

formal_parameters_and_body = "(" formal_parameters ")" "{" top_statements "}"

formal_parameters = formal_parameters_prefix?

formal_parameters_prefix = formal_parameter / ( formal_parameters_prefix "," formal_parameter )

formal_parameter = identifier

top_statements = top_statements_prefix?

top_statements_prefix = top_statement / ( top_statements_prefix top_statement )

top_statement = statement / function_definition

simple_expression = "true" / "false" / "null" / number / string / identifier / parenthesized_expression

parenthesized_expression = "(" expression ")"

expression = math_expression / assignment_expression / ( expression "," assignment_expression )

left_side_expression = call_expression

call_expression = primary_expression |  ( call_expression arguments )

arguments = "()" | ( "(" argument_list ")" )

argument_list = assignment_expression |  ( argumentList ","" assignment_expression )

math_expression = additive_expression

additive_expression = multiplicative_expression
/  ( additive_expression "+" multiplicativeExpression )
/  ( additive_expression "-" multiplicativeExpression )

multiplicative_expression = unary_expression
|  ( multiplicative_expression "*" unary_expression )
|  ( multiplicative_expression "/" unary_expression )
|  ( multiplicative_expression "%" unary_expression )

unary_expression = postfix_expression
|  ( "++" left_side_expression )
|  ( "--" left_side_expression )
|  ( "+" unary_expression )
|  ( "-" unary_expression )
|  ( "!" unary_expression )

postfix_expression = left_side_expression
|  ( left_side_expression "++" )
|  ( left_side_expression "--" )

assignment_expression = ( left_side_expression "=" assignment_expression )

statement = ( expression_statement optional_semicolon )
		 /  block
		 /  ( return_statement optional_semicolon )

optional_semicolon = ";"?

expression_statement = expression

block = "{" block_statements "}"

block_statements = block_statements_prefix?

block_statements_prefix = statement / ( block_statements_prefix statement )

return_statement = "return" optional_expression

optional_expression = expression?